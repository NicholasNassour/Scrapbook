KEY:
## Represents the task(s) to be completed
** Represents the methods used to complete the tasks above
(This is for all code below the horizontal segment)
 
## To do later after creating User/Scrapbook/Badges
1. Store login token/info after initially logging in 
2. Do some research on what page templates to use
3. Create widgets in separate files and successfully import them into new files
4. Store a user's past locations and identify the states they were in,
then create a list to see which states they've visted

# Find a way to set the location as the app is launching so it doesn't get stuck at 0.0/0.0

## Creating Profiles
1. Created a Profile with users
2. Initialize a Scrapbook object when a User is created
3. The Scrapbook object should have a hashmap/list of Badges

__________________________________________________________________________________________

## Storing a login token so users don't need to keep signing in
1. Create a sign out option to test later requirements
2. Develop a mechanism to enable automatic sign-in functionality if a user opts in
3. Save a token to the user's device that lets them skip the sign in page and takes them to the
home page right away.
4. If the user signs out the token is deleted and they will be asked to enter their login credentials again
5. Implement email verification using Firebase to ensure that only valid and authorized emails can be used

** Storing a login token so users don't need to keep signing in
1. Created a temporary sign out button in global_page.dart to sign the user out using FirebaseAuth
2. Added a checkbox in the login page to keep the user signed in if they so chose. If the checkbox was checked,
the key "Check" in shared_preferences will be used to determine if a a user will stay logged in.
3. Instead of saving a token, the device can locally store the login info and direct them to the home page
instead of needing to login again.
4. Same as above, firebase can easily sign the user out and they will need to manually log back in.
5. Email verification was easily implemented by creating a method in authentication.dart which is called when a
user first signs up. The user could bypass the verification if the app was closed without verifying their email
and then reopened because the account info was stored. Thus, the main page was altered to check if a user existed
and their account was verified before automatically signing them in.
5.1. An issue that came up during all of this was deciding when a user's account should be created. If an account
is never created, some calls such as auth.currentUser!.emailVerified will simply cause an error because the user
doesn't exist so .emailVerified can't be called. If someone creates an account with someone else's email they won't
be able to sign in unless the email is verified. Although this is a desired characteristic, the wrong password and 
name of the user are now stored in the database. One solution would be to create the account for only 10 minutes and 
delete the account if the email isn't verified in that timeframe but in the long run this could cause people to 
abuse the system with tons of writes to the database. Another solution would be to keep the account in place but 
ask the user to reset their password if they tried to login and the account wasn't verified. It would also be
possible to not create an account and only check if an email and not user has been verified which will require 
further experimentation to see if that is possible. 
5.2 Another error that comes with trying to bypass email verification by closing and reopening the app is the user's
login is still saved locally while connected to firebase. When the user then tries to sign in if their email wasn't
verified successfully during sign up, there is an error because the user is trying to sign in on an account that
they are already signed into. A fix would be to simply sign in a user for the first time when they login rather 
than when they sign up or log the user out if they fail to verify their account.
** Verification bugs and bypasses will be revisted after completing other tasks for now

## Creating the badge component when it's been successfully obtained
1. Properly store the data for a badge in the backend when a new territory is discovered (state, country, continent)
2. Store the new badge in a data structure (list, hashmap) to be stored in the user's scrapbook
3. Create a pop up menu for when a new badge is earned
3.5 Add an animation in the pop up menu of when a badge is earned (optional for now)

Questions??
- If I have already preset badges (states, countries, continents) how would I
add it to a user's profile when it has been obtained? Do I create all the preset
badges and then set its boolean value to true when it's unlocked or do I wait until 
a badge is unlocked to create the badge object?
- What are same ways to add error handling when the app crashes? Should there be an
option which just refreshes the entire app or should the app just close on its own?
- 